I"5<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;/div&gt;
&lt;h1 id="create-your-own-variable"&gt;Create Your Own Variable&lt;/h1&gt;
&lt;p&gt;In this task, you will assign names to variable and also check their types.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Assign value of &lt;code&gt;12&lt;/code&gt; to a new variable &lt;code&gt;‘age’&lt;/code&gt; and John to &lt;code&gt;‘name’&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Save the type of age using &lt;code&gt;type(age)&lt;/code&gt; and save it to a variable &lt;code&gt;type_age&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Similarly save the type of name to a variable &lt;code&gt;type_name&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Print out the variables &lt;code&gt;type_age&lt;/code&gt; and &lt;code&gt;type_name&lt;/code&gt; using print() function.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="test-cases"&gt;Test Cases&lt;/h2&gt;
&lt;p&gt;The variable &lt;code&gt;‘age’&lt;/code&gt; should be int with value &lt;span class="math inline"&gt;\(12\)&lt;/span&gt;. The variable &lt;code&gt;‘name’&lt;/code&gt; should be string with value &lt;code&gt;‘John’&lt;/code&gt;, i.e.,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;type(age) == int&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;age == 12&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;type(name) == str&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;name == “John”&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;# Code Starts Here&lt;br /&gt;
# Assign variables name&lt;br /&gt;
age = 12&lt;br /&gt;
name = ‘John’&lt;br /&gt;
# check types&lt;br /&gt;
type_name = type(name)&lt;br /&gt;
type_age = type(age)&lt;br /&gt;
# print out types&lt;br /&gt;
print(type_name)&lt;br /&gt;
print(type_age)&lt;br /&gt;
# Code ends here&lt;br /&gt;
&lt;/p&gt;
&lt;h1 id="numbers"&gt;Numbers&lt;/h1&gt;
&lt;h2 id="numeric-types"&gt;Numeric Types&lt;/h2&gt;
&lt;p&gt;It is used to store values.&lt;br /&gt;
For Example:&lt;/p&gt;
&lt;p&gt;x = 5&lt;br /&gt;
y = 10&lt;br /&gt;
balance = 15000&lt;br /&gt;
etc&lt;/p&gt;
&lt;p&gt;Python supports three different types of numbers, listed as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;int (integers)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;float (decimal numbers)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;complex (complex numbers)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="integers"&gt;Integers&lt;/h3&gt;
&lt;p&gt;Integers are positive and negative whole numbers with no decimal point.&lt;/p&gt;
&lt;p&gt;For Example:&lt;/p&gt;
&lt;p&gt;2 and 4 are integers&lt;/p&gt;
&lt;h3 id="float"&gt;Float&lt;/h3&gt;
&lt;p&gt;Floats are the numbers containing a decimal point.&lt;/p&gt;
&lt;p&gt;For Example:&lt;/p&gt;
&lt;p&gt;2.3&lt;/p&gt;
&lt;p&gt;Note that the numbers written in a scientific notation such as &lt;span class="math inline"&gt;\(2.5*10^5\)&lt;/span&gt; are considered as float number because they contain a decimal point in notation.&lt;/p&gt;
&lt;h3 id="complex-numbers"&gt;Complex numbers&lt;/h3&gt;
&lt;p&gt;Python also provides support to complex numbers of the form &lt;span class="math inline"&gt;\(a+bj\)&lt;/span&gt; where a and b are floats and j is equals to &lt;span class="math inline"&gt;\(\sqrt{-1}\)&lt;/span&gt;.&lt;/p&gt;
&lt;h1 id="common-numeric-operations"&gt;Common Numeric Operations&lt;/h1&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class="header"&gt;
&lt;th style="text-align: center;"&gt;&lt;strong&gt;Symbol&lt;/strong&gt;&lt;/th&gt;
&lt;th style="text-align: center;"&gt;&lt;strong&gt;Function&lt;/strong&gt;&lt;/th&gt;
&lt;th style="text-align: center;"&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class="odd"&gt;
&lt;td style="text-align: center;"&gt;+&lt;/td&gt;
&lt;td style="text-align: center;"&gt;Addition&lt;/td&gt;
&lt;td style="text-align: center;"&gt;&lt;span class="math inline"&gt;\(2+3\)&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="even"&gt;
&lt;td style="text-align: center;"&gt;-&lt;/td&gt;
&lt;td style="text-align: center;"&gt;Subtraction&lt;/td&gt;
&lt;td style="text-align: center;"&gt;&lt;span class="math inline"&gt;\(2-3\)&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="odd"&gt;
&lt;td style="text-align: center;"&gt;*&lt;/td&gt;
&lt;td style="text-align: center;"&gt;Multiplication&lt;/td&gt;
&lt;td style="text-align: center;"&gt;&lt;span class="math inline"&gt;\(2*3\)&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="even"&gt;
&lt;td style="text-align: center;"&gt;//&lt;/td&gt;
&lt;td style="text-align: center;"&gt;Integer division (returns quotient only)&lt;/td&gt;
&lt;td style="text-align: center;"&gt;&lt;span class="math inline"&gt;\(3/3\)&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="odd"&gt;
&lt;td style="text-align: center;"&gt;/&lt;/td&gt;
&lt;td style="text-align: center;"&gt;division&lt;/td&gt;
&lt;td style="text-align: center;"&gt;&lt;span class="math inline"&gt;\(3/2\)&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="even"&gt;
&lt;td style="text-align: center;"&gt;**&lt;/td&gt;
&lt;td style="text-align: center;"&gt;Exponantiation&lt;/td&gt;
&lt;td style="text-align: center;"&gt;&lt;span class="math inline"&gt;\(2^3\)&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="odd"&gt;
&lt;td style="text-align: center;"&gt;abs(x)&lt;/td&gt;
&lt;td style="text-align: center;"&gt;Absolute value&lt;/td&gt;
&lt;td style="text-align: center;"&gt;&lt;span class="math inline"&gt;\(\|x\|\)&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="even"&gt;
&lt;td style="text-align: center;"&gt;exp(x)&lt;/td&gt;
&lt;td style="text-align: center;"&gt;Exponantial x&lt;/td&gt;
&lt;td style="text-align: center;"&gt;&lt;span class="math inline"&gt;\(e^x\)&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="odd"&gt;
&lt;td style="text-align: center;"&gt;log(x)&lt;/td&gt;
&lt;td style="text-align: center;"&gt;Logarithm with base e&lt;/td&gt;
&lt;td style="text-align: center;"&gt;&lt;span class="math inline"&gt;\(log_ex\)&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="even"&gt;
&lt;td style="text-align: center;"&gt;log10(x)&lt;/td&gt;
&lt;td style="text-align: center;"&gt;Logarithm with base 10&lt;/td&gt;
&lt;td style="text-align: center;"&gt;&lt;span class="math inline"&gt;\(log_{10}x\)&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="odd"&gt;
&lt;td style="text-align: center;"&gt;pow(x,y)&lt;/td&gt;
&lt;td style="text-align: center;"&gt;x raised to power y&lt;/td&gt;
&lt;td style="text-align: center;"&gt;&lt;span class="math inline"&gt;\(x^y\)&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id="type-conversion"&gt;Type Conversion&lt;/h1&gt;
&lt;p&gt;During data manipulation, there might arise a need for converting an integer to float, float to an integer, float to a string or a string (having a number) to an integer or float. Lets look at how we can do this.&lt;/p&gt;
&lt;p&gt;Let’s say we have a number ‘x’. The following some operations can be done:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;int(x)&lt;/code&gt; converts it to an integer.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;float(x)&lt;/code&gt; converts it to a float.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;complex(x)&lt;/code&gt; converts it to a complex number with real part x and imaginary part 0.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We can convert an integer, a float or a complex to a string by &lt;code&gt;str(x)&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="calculate-the-compound-interest"&gt;Calculate the compound interest&lt;/h2&gt;
&lt;p&gt;In this problem, you will calculate the compound interest. Remember that the formula for compound interest for the amount ‘A’ after ‘n’ years is &lt;span class="math display"&gt;\[A = P \left(1 + \frac{r}{100} \right) ^n\]&lt;/span&gt; Here, A is the amount after n years, r is the rate of interest per annum, and P is the principal.&lt;/p&gt;
&lt;p&gt;Our task is to calculate the amount after two years when principal amount is USD 1000 at a rate of 10% per annum.&lt;/p&gt;
&lt;h3 id="instructions"&gt;Instructions&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Save principal, rate of interest and time in variables p, r and n respectively.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now calculate the amount according to formula given above and save it in a variable A.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Calculate interest by formula &lt;span class="math inline"&gt;\(A-P\)&lt;/span&gt; and store it in variable Interest.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Print out interest using print() function.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;# Code Starts Here&lt;br /&gt;
# Store variable names&lt;br /&gt;
p = 1000&lt;br /&gt;
r = 10&lt;br /&gt;
n = 2&lt;br /&gt;
# Amount formula&lt;br /&gt;
A = p*(1+10/100)**2&lt;br /&gt;
# Display Amount&lt;br /&gt;
print(A)&lt;br /&gt;
# Calculate and display interest&lt;br /&gt;
interest = A-P print(interest)&lt;/p&gt;
&lt;p&gt;# Code ends here&lt;/p&gt;
&lt;h1 id="string"&gt;String&lt;/h1&gt;
&lt;p&gt;Strings can be written in three ways:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Single quotes.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;name = ‘Ajeet’&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Double quotes&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;name = “Ajeet”&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Triple quotes: They are used as multi line comment and also used to make docstrings of a defined function.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;“‘This is a function. Do not change it, or else it will not work.’”&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We can use Python’s built in len() function to find the length of string.&lt;/p&gt;
&lt;h2 id="slicing-and-indexing-of-strings"&gt;Slicing and Indexing of Strings&lt;/h2&gt;
&lt;p&gt;Indexing means giving every character of string a unique value. Indexing in Python starts from zero, that means first letter of string has a value zero (not 1). All the iterables (String, dictionaries, tuples, sets) have this property.&lt;/p&gt;
&lt;table&gt;
&lt;tbody&gt;
&lt;tr class="odd"&gt;
&lt;td style="text-align: center;"&gt;0&lt;/td&gt;
&lt;td style="text-align: center;"&gt;1&lt;/td&gt;
&lt;td style="text-align: center;"&gt;2&lt;/td&gt;
&lt;td style="text-align: center;"&gt;3&lt;/td&gt;
&lt;td style="text-align: center;"&gt;4&lt;/td&gt;
&lt;td style="text-align: center;"&gt;5&lt;/td&gt;
&lt;td style="text-align: center;"&gt;6&lt;/td&gt;
&lt;td style="text-align: center;"&gt;7&lt;/td&gt;
&lt;td style="text-align: center;"&gt;8&lt;/td&gt;
&lt;td style="text-align: center;"&gt;9&lt;/td&gt;
&lt;td style="text-align: center;"&gt;10&lt;/td&gt;
&lt;td style="text-align: center;"&gt;11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="even"&gt;
&lt;td style="text-align: center;"&gt;M&lt;/td&gt;
&lt;td style="text-align: center;"&gt;O&lt;/td&gt;
&lt;td style="text-align: center;"&gt;N&lt;/td&gt;
&lt;td style="text-align: center;"&gt;T&lt;/td&gt;
&lt;td style="text-align: center;"&gt;Y&lt;/td&gt;
&lt;td style="text-align: center;"&gt;&lt;/td&gt;
&lt;td style="text-align: center;"&gt;P&lt;/td&gt;
&lt;td style="text-align: center;"&gt;Y&lt;/td&gt;
&lt;td style="text-align: center;"&gt;T&lt;/td&gt;
&lt;td style="text-align: center;"&gt;H&lt;/td&gt;
&lt;td style="text-align: center;"&gt;O&lt;/td&gt;
&lt;td style="text-align: center;"&gt;N&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="odd"&gt;
&lt;td style="text-align: center;"&gt;-12&lt;/td&gt;
&lt;td style="text-align: center;"&gt;-11&lt;/td&gt;
&lt;td style="text-align: center;"&gt;-10&lt;/td&gt;
&lt;td style="text-align: center;"&gt;-9&lt;/td&gt;
&lt;td style="text-align: center;"&gt;-8&lt;/td&gt;
&lt;td style="text-align: center;"&gt;-7&lt;/td&gt;
&lt;td style="text-align: center;"&gt;-6&lt;/td&gt;
&lt;td style="text-align: center;"&gt;-5&lt;/td&gt;
&lt;td style="text-align: center;"&gt;-4&lt;/td&gt;
&lt;td style="text-align: center;"&gt;-4&lt;/td&gt;
&lt;td style="text-align: center;"&gt;-3&lt;/td&gt;
&lt;td style="text-align: center;"&gt;-1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;In the above image, for the string “Monty Python”, the following points can be noticed.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;From left to right, index goes from 0 to (length of string - 1).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;From right to left, index goes from -(length of string) to -1.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Ommiting term before or after the colon (:) means including everything from starting or till the end, respectively.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The syntex for slicing in Python, in general, is &lt;strong&gt;[Start index(included):Stop index(excluded)]&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In the above example:&lt;/p&gt;
&lt;p&gt;if we assign variable&lt;/p&gt;
&lt;p&gt;name = “Monty Python”&lt;/p&gt;
&lt;p&gt;then:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;name[6:10]&lt;/code&gt; returns &lt;code&gt;Pyth&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;name[-12:-7]&lt;/code&gt; returns &lt;code&gt;Monty&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;name[:4]&lt;/code&gt; returns &lt;code&gt;Monty&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;name[6:]&lt;/code&gt; returns &lt;code&gt;Python&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;name[:]&lt;/code&gt; returns &lt;code&gt;Monty Python&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;name[-6:9]&lt;/code&gt; returns &lt;code&gt;Pyt&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</code></pre></div></div>
:ET